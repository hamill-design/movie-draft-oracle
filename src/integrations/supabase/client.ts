
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zduruulowyopdstihfwk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpkdXJ1dWxvd3lvcGRzdGloZndrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzMTU1NTYsImV4cCI6MjA2Njg5MTU1Nn0.MzDpL-_nYR0jNEO-qcAf37tPz-b5DZpDCVrpy1F_saY";

// Create base client
const baseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Create a proxy to add guest session headers
const supabaseHandler = {
  get(target: any, prop: string) {
    const originalMethod = target[prop];
    
    // For methods that make requests, add guest session header
    if (prop === 'from' || prop === 'rpc') {
      return function(...args: any[]) {
        const result = originalMethod.apply(target, args);
        
        // Add guest session header if available
        const guestSessionId = localStorage.getItem('guest_session_id');
        if (guestSessionId && result && typeof result === 'object') {
          // Add custom header for guest session
          if (result.headers) {
            result.headers['x-guest-session-id'] = guestSessionId;
          } else {
            Object.defineProperty(result, 'headers', {
              value: { 'x-guest-session-id': guestSessionId },
              writable: true
            });
          }
        }
        
        return result;
      };
    }
    
    return originalMethod;
  }
};

// Export proxied client
export const supabase = new Proxy(baseClient, supabaseHandler);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
